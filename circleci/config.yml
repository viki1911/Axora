version: 2.1
workflows:
  version: 2

  "Validate Community Project feature":
  #when commit is made to feature branch within specific, validate the change against CI validation org (including running local tests) to ensure issues are caught early
  #TODO this is currently set up for Axora community project as an example, but can be replicated for other projects (including BAU)
  #just need to change the context and branch filter (once sandbox and connected app is set up)
    jobs:
      - dummy: #TODO once setup done (sandbox, app and env variables set up), remove this line and uncomment below two lines
      #- validate:
      #    context: community-ci-validation
          filters:
            branches:
              only: /feature/community\/.*/

  "Deploy to Community Project Sandbox":
  #when commit to certain develop branch is made, validate change against CI validation org and deploy to relevant project sandbox and associated ci validation sandbox
  #TODO this is currently set up for Axora community project as an example, but can be replicated for other projects (including BAU)
  #just need to change the context and branch filter (once sandbox and connected app is set up)
    jobs:
      - validate:
          name: Validate changes
          context: community-ci-validation
          filters:
            branches:
              only: develop-community
      - deploy:
          name: Deploy to Community sandbox
          context: community-develop
          requires:
            - Validate changes
      - deploy:
          name: Deploy to Community CI validation sandbox
          context: community-ci-validation
          requires:
            - Deploy to Community sandbox

  "Deploy to Release CI validation sandbox":
  #when commit to integration branch is made (changes for release candidate), deploy to integration sandbox to validate integrity of changes as a whole
  #TODO this job needs further setup (including sandbox, connected app and environment variables) - please uncomment below lines when done
    jobs:
      - dummy: #TODO once setup done (sandbox, app and env variables set up), remove this line and uncomment below two lines
      #- deploy:
      #    context: release-ci-validation
          filters:
            branches:
              only: integration

  "Deploy Release branch":
  #when commit to release branch is made, changes are validtes against each following environment and then eployed to that environment once approval is received.
  #environments in the order of steps: UAT, Staging, Production
  #once deployment to production is done, there is optional manual step to merge changes to master
  #this should be done only once deployment to live is successful, any post-deployment steps are done and release is confirmed as fully live)
    jobs:
      - validate:
          name: Validate to UAT
          context: UAT
          filters:
            branches:
              only: release
      - deploy:
          name: Approve deployment to UAT
          type: approval
          requires:
            - Validate to UAT
      - deploy:
          name: Deploy to UAT
          context: UAT
          requires:
            - Approve deployment to UAT
      #TODO staging steps to be fully activated once sandbox and app and environment variables are set up
      - dummy: #TODO remove this line and uncomment line below once setup for Staging is complete
      #- deploy:
          name: Approve deployment to Staging
          type: approval
          requires:
            - Deploy to UAT
      - dummy: #TODO remove this line and uncomment line below once setup for Staging is complete
      #- deploy:
          name: Deploy to Staging
          context: STG
          requires:
            - Approve deployment to Staging
      - validate:
          name: Validate to Live
          context: Prod
          requires:
            - Deploy to Staging
      - deploy:
          name: Approve deployment to Live
          type: approval
          requires:
            - Validate to Live
      - deploy:
          name: Deploy to Live
          context: Prod
          requires:
            - Approve deployment to Live
      - commit-to-master:
          name: Approve changes for master branch
          type: approval
          requires:
            - Approve deployment to Live
      - commit-to-master:
          name: Commit changes to master branch
          requires:
            - Approve changes for master branch          

jobs:
  dummy:
    docker:
      - image: salesforce/salesforcedx:latest-full
    steps:
      - run:
          name: Decrypt server key
          command: echo 'Dummy step complete'

  validate:
    docker:
      - image: salesforce/salesforcedx:latest-full
    steps:
      - checkout
      - run:
          name: Decrypt server key
          command: |
            openssl enc -nosalt -aes-256-cbc -d -in assets/server.key.enc -out assets/server.key -base64 -K $DECRYPTION_KEY -iv $DECRYPTION_IV
            openssl rsa -in assets/server.key -check -noout 
      - run:
          name: Run Apex tests
          command: |
            sfdx force:auth:jwt:grant --clientid $CONSUMER_KEY --jwtkeyfile assets/server.key --username $SFDX_USER --instanceurl $SFDX_PATH
            sh .sfdx/validateOrDeploy.sh -v true -u $SFDX_USER -t 'RunLocalTests'

  deploy:
    docker:
      - image: salesforce/salesforcedx:latest-full
    steps:
      - checkout
      - run:
          name: Decrypt server key
          command: |
            openssl enc -nosalt -aes-256-cbc -d -in assets/server.key.enc -out assets/server.key -base64 -K $DECRYPTION_KEY -iv $DECRYPTION_IV
            openssl rsa -in assets/server.key -check -noout 
      - run:
          name: Deploy changes
          command: |
            sfdx force:auth:jwt:grant --clientid $CONSUMER_KEY --jwtkeyfile assets/server.key --username $SFDX_USER --instanceurl $SFDX_PATH
            sh .sfdx/validateOrDeploy.sh -v false -u $SFDX_USER -t 'RunLocalTests'

  commit-to-master:
    docker:
      - image: salesforce/salesforcedx:latest-full
    steps:
      - checkout
      - run:
          name: Commit to master branch
          command: |
            git checkout master && git merge develop
            git push origin master
